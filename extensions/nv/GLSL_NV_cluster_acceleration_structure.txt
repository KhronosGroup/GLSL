Name

    NV_cluster_acceleration_structure

Name Strings

    GL_NV_cluster_acceleration_structure

Contact

    Pyarelal Knowles (pknowles 'at' nvidia.com), NVIDIA

Contributors

    Ashwin Lele, NVIDIA
    Eric Werness, NVIDIA
    Vikram Kushwaha, NVIDIA

Status

    Complete

Version

    Last Modified Date: 2025-01-01
    Revision: 1

Dependencies

    This extension can be applied to OpenGL GLSL versions 4.60
    (#version 460) and higher.

    This extension is written against revision 5 of the OpenGL Shading Language
    version 4.60, dated September 4, 2017.

    This extension interacts with revision 43 of the GL_KHR_vulkan_glsl
    extension, dated October 25, 2017.

    This extension interacts with GL_EXT_ray_tracing.

    This extension interacts with GL_EXT_ray_query.

    This extension interacts with GL_NV_shader_invocation_reorder.

Overview

    This extension document modifies GLSL to add support for ray tracing cluster
    acceleration structures. Each cluster acceleration structure is assigned a
    application provided cluster ID and this extension allows querying that
    value for intersections with its geometry.

    This extension document adds support for the following extensions to be used
    within GLSL:

    - GL_NV_cluster_acceleration_structure - enables cluster acceleration structures.

    Mapping to SPIR-V
    -----------------

    For informational purposes (non-normative), the following is an
    expected way for an implementation to map GLSL constructs to SPIR-V
    constructs:

      gl_ClusterIDNV -> ClusterIDNV decorated OpVariable

      rayQueryGetIntersectionClusterIdNV ->
           -> OpRayQueryGetIntersectionClusterIdNV instruction

      hitObjectGetClusterIdNV -> OpHitObjectGetClusterIdNV instruction

Modifications to the OpenGL Shading Language Specification, Version 4.60

    Including the following line in a shader can be used to control the
    language features described in this extension:

      #extension GL_NV_cluster_acceleration_structure    : <behavior>

    where <behavior> is as specified in section 3.3.
    New preprocessor #defines are added:

      #define GL_NV_cluster_acceleration_structure       1

Additions to Chapter 7 of the OpenGL Shading Language Specification
(Built-in Variables)

    Modify Section 7.1, Built-in Languages Variables

    In the intersection, any-hit and closest-hit shading languages, built-in
    variables are declared as follows

        // Cluster acceleration structure cluster ID or gl_ClusterIDNoneNV
        in int   gl_ClusterIDNV;

    Add the following description for gl_ClusterIDNV:

    gl_ClusterIDNV is available in the any-hit and closest-hit shading languages
    to provide the application provided cluster ID of the cluster acceleration
    structure that was hit. If a cluster acceleration structure was not hit,
    gl_ClusterIDNV is set to gl_ClusterIDNoneNV.

    Modify subsection 7.3.2, "Fixed Constants"

    The following constants are provided in all shader languages.

    const int gl_ClusterIDNoneNV = -1;

    This is used as the value of gl_ClusterIDNV and returned from
    rayQueryGetIntersectionClusterIdNV() to describe an intersection that was
    not with a cluster acceleration structure.

Additions to Chapter 8 of the OpenGL Shading Language Specification
(Built-in Functions)

    Modify Section 8.X, Ray Query Functions

    Syntax:

        int rayQueryGetIntersectionClusterIdNV(rayQueryEXT q,
                                               bool committed);

    Returns the cluster ID corresponding to the current intersection of the ray
    if the intersection is with a cluster acceleration structure. Returns
    gl_ClusterIDNoneNV if the intersection is not with a cluster acceleration
    structure.

    If <committed> is 'true'  returns value for committed intersection.
    If <committed> is 'false' returns value for candidate intersection.

    <committed> must be a compile time constant value.

    Modify section 8.X, Hit Object Functions

    Syntax:

        int hitObjectGetClusterIdNV(hitObjectNV hitObject);

    Returns the cluster ID encoded in the hit object if the intersection was
    with a cluster acceleration structure, otherwise gl_ClusterIDNoneNV.

Interactions with GL_EXT_ray_tracing

    If GL_EXT_ray_tracing is not supported then the gl_ClusterIDNV builtin is
    not added.

Interactions with GL_EXT_ray_query

    If GL_EXT_ray_query is not supported then the
    rayQueryGetIntersectionClusterIdNV function is not added.

Interactions with GL_NV_shader_invocation_reorder

    If GL_NV_shader_invocation_reorder is not supported then the
    hitObjectGetClusterIdNV function is not added.

    Hit objects added by GL_NV_shader_invocation_reorder cannot record hits with
    a cluster acceleration structure.

Issues

    1. Should this interact with hitObjectNV, e.g. to record a cluster ID?

    RESOLVED: Only to query the cluster ID but not worth the trouble to record.

    2. Do we need a new hit kind?

    RESOLVED: No. Cluster acceleration structures contain geometry, which has a
    hit kind. Whether the intersection is with a cluster or not, i.e.
    gl_ClusterIDNV != gl_ClusterIDNoneNV, is orthogonal to the hit kind.

    3. Should gl_ClusterIDNV be available in the intersection shader?

    RESOLVED: No. Triangles are currently the only cluster geometry supported so
    gl_ClusterIDNV would always implicitly be gl_ClusterIDNoneNV.

Revision History

    Rev.  Date         Author     Changes
    ----  -----------  ---------  -------------------------------------------
     1    2025-01-01   pknowles   Internal revisions.
